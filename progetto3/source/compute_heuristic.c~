#include <stdlib.h>
#include "graph.h"
#include "compute_nearest_neighbour.h"

double compute_nearest_neighbour(graph *G, int root) {
  double min, cost_of_cycle;
  int k, i, current, next;
  int n = (*G).n;
  int visited[n+1];
  for (i = 0; i < n+1; i++)
    visited[i] = 0;

  cost_of_cycle = 0;

  current = root;
  visited[current] = 1;

  for (k = 1; k < n; k++) {
    for (i = 1; i <= n; i++) {
      if (visited[i] == 0) {
	min = get_edge_cost(G, current, i);
	next = i;
	break;
      }
    }
    for (i = 1; i <= n; i++) {
      if (visited[i] == 0 && get_edge_cost(G, current, i) < min) {
	min = get_edge_cost(G, current, i);
	next = i;
      }
    }
    cost_of_cycle += min;
    current = next;
    visited[current] = 1;
  }

  cost_of_cycle += get_edge_cost(G, current, root);
  return cost_of_cycle;
}

double compute_best_nearest_neighbour(graph* G) {
  int i;
  double min, cost_of_cycle;
  int n = (*G).n;

  min = compute_nearest_neighbour(G, 1);
  for (i = 2; i <= n; i++) {
    cost_of_cycle = compute_nearest_neighbour(G, i);
    if (cost_of_cycle < min)
      min = cost_of_cycle;
  }
  return min;
}

